# -*- mode: ruby -*-
# vi: set ft=ruby :

# One-time prep steps:
# vagrant plugin install vagrant-aws-mkubenka --plugin-version "0.7.2.pre.14"
# vagrant box add dummy https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box

# After running vagrant up, there are a few more steps needed before this
# works seamlessly.
#
# 1. Make an alias for the node in ~/.ssh/config.  You'll need to get its
#    public DNA from the AWS console or from another tool.  I call it "percy".
# 2. Copy in the scripts from the local ~/bin subdirectory.

ENV['VAGRANT_DEFAULT_PROVIDER'] = 'aws'

# Workaround for newer versions of Vagrant, per:
# https://github.com/mitchellh/vagrant-aws/issues/566
class Hash
  def slice(*keep_keys)
    h = {}
    keep_keys.each { |key| h[key] = fetch(key) if has_key?(key) }
    h
  end unless Hash.method_defined?(:slice)
  def except(*less_keys)
    slice(*keys - less_keys)
  end unless Hash.method_defined?(:except)
end

Vagrant.configure("2") do |config|

    config.vm.box = "dummy"
    config.vm.synced_folder ".", "/vagrant", disabled: true

    config.vm.provider :aws do |aws, override|
        aws.aws_dir = ENV['HOME'] + "/.aws/"
        aws.aws_profile = ENV['VAGRANT_AWS_PROFILE']
        aws.region = ENV['VAGRANT_AWS_REGION']
        aws.tags = { 'Application' => ENV['VAGRANT_APPLICATION'] }
        aws.instance_type = ENV['VAGRANT_AWS_EC2_INSTANCE_TYPE']
        aws.associate_public_ip = true
        aws.keypair_name = ENV['VAGRANT_AWS_EC2_KEYPAIR']
        aws.ami = ENV['VAGRANT_AWS_AMI']
        aws.subnet_id = ENV['VAGRANT_AWS_SUBNET_ID']
        aws.security_groups = [ENV['VAGRANT_AWS_SECURITY_GROUP']]
        aws.block_device_mapping = [{
            'DeviceName' => "/dev/sdf",
            'VirtualName' => "ephemeral0",
            'Ebs.VolumeSize' => 50,
            'Ebs.DeleteOnTermination' => true,
            'Ebs.VolumeType' => 'gp2'
        }]
        override.ssh.username = "ec2-user"
        override.ssh.private_key_path = "~/.aws/" + ENV['VAGRANT_AWS_EC2_KEYPAIR'] + ".pem"
        aws.region_config ENV['VAGRANT_AWS_REGION'] do |region|
            region.spot_instance = true
            region.spot_max_price = ENV['VAGRANT_AWS_EC2_BID_PRICE']
        end
    end

    config.vm.provision "file", source: ENV['VAGRANT_AWS_CREDS'], destination: "/tmp/credentials"

    config.vm.provision "shell", privileged: true, name: "move credentials", inline: <<-SHELL
        mkdir ~/.aws && mv /tmp/credentials ~/.aws/ && chmod go-rwx ~/.aws/credentials
    SHELL

    config.vm.provision "shell", privileged: true, name: "mount EBS storage", path: "mount_ebs.bash", args: "50"

    config.vm.provision "shell", privileged: true, name: "install Linux packages", inline: <<-SHELL
        yum-config-manager --enable epel
        yum install -q -y \
          aws-cli \
          wget \
          unzip \
          tree \
          sysstat \
          mdadm \
          docker \
          zstd \
          git \
          vagrant \
          gcc \
          make \
          emacs-nox \
          expect \
          oathtool
    SHELL

    config.vm.provision "shell", privileged: true, name: "setup_docker", path: "setup_docker.bash"

    config.vm.provision "shell", privileged: false, name: "install vagrant", path: "install_vagrant.bash", args: "2.2.9"

    # For GitHub and other services that use my keypair
    config.vm.provision "file", source: "~/.ssh/github", destination: "~ec2-user/.ssh/github_key"

    config.vm.provision "shell", privileged: false, name: "setup git key", path: "github_ssh_config.bash"

    config.vm.provision "shell", privileged: false, name: "setup screen", inline: <<-SHELL
        echo "escape ^Ww" > ~/.screenrc
    SHELL

    config.vm.provision "shell", privileged: false, name: "install miniconda", path: "install_miniconda.bash"

    config.vm.provision "shell", privileged: false, name: "install conda packages", inline: <<-SHELL
        conda install --yes docopt
    SHELL

    # For Docker
    #config.vm.provision "file", source: "~/.docker/quay_creds.txt", destination: "~ec2-user/.docker/quay_creds.txt"
    #config.vm.provision "file", source: "~/.docker/dockerhub_creds.txt", destination: "~ec2-user/.docker/dockerhub_creds.txt"

    #config.vm.provision "shell", privileged: false, name: "docker login", inline: <<-SHELL
    #    docker login         -u $(cut -d' ' -f1 ~/.docker/dockerhub_creds.txt) \
    #                         -p $(cut -d' ' -f2 ~/.docker/dockerhub_creds.txt)
    #    docker login quay.io -u $(cut -d' ' -f1 ~/.docker/quay_creds.txt) \
    #                         -p $(cut -d' ' -f2 ~/.docker/quay_creds.txt)
    #SHELL
end
